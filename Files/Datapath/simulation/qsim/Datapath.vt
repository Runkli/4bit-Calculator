// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2019 00:58:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	ALU_OP,
	Cin,
	Clk,
	DIN,
	Input_Select,
	Load_A,
	Load_B,
	Reset,
	Y_Select,
	sampler_tx
);
input [2:0] ALU_OP;
input  Cin;
input  Clk;
input [3:0] DIN;
input [2:0] Input_Select;
input  Load_A;
input  Load_B;
input  Reset;
input  Y_Select;
output sampler_tx;

reg sample;
time current_time;
always @(ALU_OP or Cin or Clk or DIN or Input_Select or Load_A or Load_B or Reset or Y_Select)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	Cout,
	DOUT,
	sampler_rx
);
input  Cout;
input [3:0] DOUT;
input sampler_rx;

reg  Cout_expected;
reg [3:0] DOUT_expected;

reg  Cout_prev;
reg [3:0] DOUT_prev;

reg  Cout_expected_prev;
reg [3:0] DOUT_expected_prev;

reg  last_Cout_exp;
reg [3:0] last_DOUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	DOUT_prev = DOUT;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	DOUT_expected_prev = DOUT_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 
// expected DOUT[ 3 ]
initial
begin
	DOUT_expected[3] = 1'bX;
end 
// expected DOUT[ 2 ]
initial
begin
	DOUT_expected[2] = 1'bX;
end 
// expected DOUT[ 1 ]
initial
begin
	DOUT_expected[1] = 1'bX;
end 
// expected DOUT[ 0 ]
initial
begin
	DOUT_expected[0] = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or DOUT_expected or DOUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected DOUT = %b | ",Cout_expected_prev,DOUT_expected_prev);
	$display("| real Cout = %b | real DOUT = %b | ",Cout_prev,DOUT_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( DOUT_expected_prev[0] !== 1'bx ) && ( DOUT_prev[0] !== DOUT_expected_prev[0] )
		&& ((DOUT_expected_prev[0] !== last_DOUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT_exp[0] = DOUT_expected_prev[0];
	end
	if (
		( DOUT_expected_prev[1] !== 1'bx ) && ( DOUT_prev[1] !== DOUT_expected_prev[1] )
		&& ((DOUT_expected_prev[1] !== last_DOUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT_exp[1] = DOUT_expected_prev[1];
	end
	if (
		( DOUT_expected_prev[2] !== 1'bx ) && ( DOUT_prev[2] !== DOUT_expected_prev[2] )
		&& ((DOUT_expected_prev[2] !== last_DOUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT_exp[2] = DOUT_expected_prev[2];
	end
	if (
		( DOUT_expected_prev[3] !== 1'bx ) && ( DOUT_prev[3] !== DOUT_expected_prev[3] )
		&& ((DOUT_expected_prev[3] !== last_DOUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT_exp[3] = DOUT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] ALU_OP;
reg Cin;
reg Clk;
reg [3:0] DIN;
reg [2:0] Input_Select;
reg Load_A;
reg Load_B;
reg Reset;
reg Y_Select;
// wires                                               
wire Cout;
wire [3:0] DOUT;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OP(ALU_OP),
	.Cin(Cin),
	.Clk(Clk),
	.Cout(Cout),
	.DIN(DIN),
	.DOUT(DOUT),
	.Input_Select(Input_Select),
	.Load_A(Load_A),
	.Load_B(Load_B),
	.Reset(Reset),
	.Y_Select(Y_Select)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #20000 1'b1;
	#20000;
end 
// Input_Select[ 2 ]
initial
begin
	Input_Select[2] = 1'b0;
	Input_Select[2] = #60000 1'b1;
	Input_Select[2] = #40000 1'b0;
	Input_Select[2] = #80000 1'b1;
	Input_Select[2] = #40000 1'b0;
	Input_Select[2] = #240000 1'b1;
	Input_Select[2] = #120000 1'b0;
end 
// Input_Select[ 1 ]
initial
begin
	Input_Select[1] = 1'b0;
	Input_Select[1] = #60000 1'b1;
	Input_Select[1] = #40000 1'b0;
	Input_Select[1] = #80000 1'b1;
	Input_Select[1] = #40000 1'b0;
	Input_Select[1] = #320000 1'b1;
	Input_Select[1] = #40000 1'b0;
end 
// Input_Select[ 0 ]
initial
begin
	Input_Select[0] = 1'b0;
end 

// Load_A
initial
begin
	Load_A = 1'b0;
	Load_A = #60000 1'b1;
	Load_A = #40000 1'b0;
	Load_A = #400000 1'b1;
	Load_A = #40000 1'b0;
end 

// Load_B
initial
begin
	Load_B = 1'b0;
	Load_B = #180000 1'b1;
	Load_B = #40000 1'b0;
	Load_B = #240000 1'b1;
	Load_B = #40000 1'b0;
	Load_B = #40000 1'b1;
	Load_B = #40000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 
// ALU_OP[ 2 ]
initial
begin
	ALU_OP[2] = 1'b0;
end 
// ALU_OP[ 1 ]
initial
begin
	ALU_OP[1] = 1'b0;
end 
// ALU_OP[ 0 ]
initial
begin
	ALU_OP[0] = 1'b0;
	ALU_OP[0] = #460000 1'b1;
	ALU_OP[0] = #40000 1'b0;
	ALU_OP[0] = #40000 1'b1;
	ALU_OP[0] = #40000 1'b0;
end 
// DIN[ 3 ]
initial
begin
	DIN[3] = 1'b0;
end 
// DIN[ 2 ]
initial
begin
	DIN[2] = 1'b0;
end 
// DIN[ 1 ]
initial
begin
	DIN[1] = 1'b0;
end 
// DIN[ 0 ]
initial
begin
	DIN[0] = 1'b1;
end 

// Y_Select
initial
begin
	Y_Select = 1'b0;
	Y_Select = #460000 1'b1;
	Y_Select = #120000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.ALU_OP(ALU_OP),
	.Cin(Cin),
	.Clk(Clk),
	.DIN(DIN),
	.Input_Select(Input_Select),
	.Load_A(Load_A),
	.Load_B(Load_B),
	.Reset(Reset),
	.Y_Select(Y_Select),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.Cout(Cout),
	.DOUT(DOUT),
	.sampler_rx(sampler)
);
endmodule

