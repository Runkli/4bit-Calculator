// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2019 20:51:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_vlg_sample_tst(
	Clock,
	MOP,
	RUN,
	sampler_tx
);
input  Clock;
input [3:0] MOP;
input  RUN;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or MOP or RUN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FSM_vlg_check_tst (
	ALUop,
	Cin,
	Input_Select,
	Load_A,
	Load_B,
	out_state,
	Reset,
	Y_Select,
	sampler_rx
);
input [2:0] ALUop;
input  Cin;
input [2:0] Input_Select;
input  Load_A;
input  Load_B;
input [3:0] out_state;
input  Reset;
input  Y_Select;
input sampler_rx;

reg [2:0] ALUop_expected;
reg  Cin_expected;
reg [2:0] Input_Select_expected;
reg  Load_A_expected;
reg  Load_B_expected;
reg [3:0] out_state_expected;
reg  Reset_expected;
reg  Y_Select_expected;

reg [2:0] ALUop_prev;
reg  Cin_prev;
reg [2:0] Input_Select_prev;
reg  Load_A_prev;
reg  Load_B_prev;
reg [3:0] out_state_prev;
reg  Reset_prev;
reg  Y_Select_prev;

reg [2:0] ALUop_expected_prev;
reg  Cin_expected_prev;
reg [2:0] Input_Select_expected_prev;
reg  Load_A_expected_prev;
reg  Load_B_expected_prev;
reg [3:0] out_state_expected_prev;
reg  Reset_expected_prev;
reg  Y_Select_expected_prev;

reg [2:0] last_ALUop_exp;
reg  last_Cin_exp;
reg [2:0] last_Input_Select_exp;
reg  last_Load_A_exp;
reg  last_Load_B_exp;
reg [3:0] last_out_state_exp;
reg  last_Reset_exp;
reg  last_Y_Select_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUop_prev = ALUop;
	Cin_prev = Cin;
	Input_Select_prev = Input_Select;
	Load_A_prev = Load_A;
	Load_B_prev = Load_B;
	out_state_prev = out_state;
	Reset_prev = Reset;
	Y_Select_prev = Y_Select;
end

// update expected /o prevs

always @(trigger)
begin
	ALUop_expected_prev = ALUop_expected;
	Cin_expected_prev = Cin_expected;
	Input_Select_expected_prev = Input_Select_expected;
	Load_A_expected_prev = Load_A_expected;
	Load_B_expected_prev = Load_B_expected;
	out_state_expected_prev = out_state_expected;
	Reset_expected_prev = Reset_expected;
	Y_Select_expected_prev = Y_Select_expected;
end


// expected ALUop[ 2 ]
initial
begin
	ALUop_expected[2] = 1'bX;
end 
// expected ALUop[ 1 ]
initial
begin
	ALUop_expected[1] = 1'bX;
end 
// expected ALUop[ 0 ]
initial
begin
	ALUop_expected[0] = 1'bX;
end 

// expected Cin
initial
begin
	Cin_expected = 1'bX;
end 
// expected Input_Select[ 2 ]
initial
begin
	Input_Select_expected[2] = 1'bX;
end 
// expected Input_Select[ 1 ]
initial
begin
	Input_Select_expected[1] = 1'bX;
end 
// expected Input_Select[ 0 ]
initial
begin
	Input_Select_expected[0] = 1'bX;
end 

// expected Load_A
initial
begin
	Load_A_expected = 1'bX;
end 

// expected Load_B
initial
begin
	Load_B_expected = 1'bX;
end 
// expected out_state[ 3 ]
initial
begin
	out_state_expected[3] = 1'bX;
end 
// expected out_state[ 2 ]
initial
begin
	out_state_expected[2] = 1'bX;
end 
// expected out_state[ 1 ]
initial
begin
	out_state_expected[1] = 1'bX;
end 
// expected out_state[ 0 ]
initial
begin
	out_state_expected[0] = 1'bX;
end 

// expected Reset
initial
begin
	Reset_expected = 1'bX;
end 

// expected Y_Select
initial
begin
	Y_Select_expected = 1'bX;
end 
// generate trigger
always @(ALUop_expected or ALUop or Cin_expected or Cin or Input_Select_expected or Input_Select or Load_A_expected or Load_A or Load_B_expected or Load_B or out_state_expected or out_state or Reset_expected or Reset or Y_Select_expected or Y_Select)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUop = %b | expected Cin = %b | expected Input_Select = %b | expected Load_A = %b | expected Load_B = %b | expected out_state = %b | expected Reset = %b | expected Y_Select = %b | ",ALUop_expected_prev,Cin_expected_prev,Input_Select_expected_prev,Load_A_expected_prev,Load_B_expected_prev,out_state_expected_prev,Reset_expected_prev,Y_Select_expected_prev);
	$display("| real ALUop = %b | real Cin = %b | real Input_Select = %b | real Load_A = %b | real Load_B = %b | real out_state = %b | real Reset = %b | real Y_Select = %b | ",ALUop_prev,Cin_prev,Input_Select_prev,Load_A_prev,Load_B_prev,out_state_prev,Reset_prev,Y_Select_prev);
`endif
	if (
		( ALUop_expected_prev[0] !== 1'bx ) && ( ALUop_prev[0] !== ALUop_expected_prev[0] )
		&& ((ALUop_expected_prev[0] !== last_ALUop_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUop_exp[0] = ALUop_expected_prev[0];
	end
	if (
		( ALUop_expected_prev[1] !== 1'bx ) && ( ALUop_prev[1] !== ALUop_expected_prev[1] )
		&& ((ALUop_expected_prev[1] !== last_ALUop_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUop_exp[1] = ALUop_expected_prev[1];
	end
	if (
		( ALUop_expected_prev[2] !== 1'bx ) && ( ALUop_prev[2] !== ALUop_expected_prev[2] )
		&& ((ALUop_expected_prev[2] !== last_ALUop_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUop_exp[2] = ALUop_expected_prev[2];
	end
	if (
		( Cin_expected_prev !== 1'bx ) && ( Cin_prev !== Cin_expected_prev )
		&& ((Cin_expected_prev !== last_Cin_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cin_expected_prev);
		$display ("     Real value = %b", Cin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cin_exp = Cin_expected_prev;
	end
	if (
		( Input_Select_expected_prev[0] !== 1'bx ) && ( Input_Select_prev[0] !== Input_Select_expected_prev[0] )
		&& ((Input_Select_expected_prev[0] !== last_Input_Select_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Select[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Select_expected_prev);
		$display ("     Real value = %b", Input_Select_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_Select_exp[0] = Input_Select_expected_prev[0];
	end
	if (
		( Input_Select_expected_prev[1] !== 1'bx ) && ( Input_Select_prev[1] !== Input_Select_expected_prev[1] )
		&& ((Input_Select_expected_prev[1] !== last_Input_Select_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Select[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Select_expected_prev);
		$display ("     Real value = %b", Input_Select_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_Select_exp[1] = Input_Select_expected_prev[1];
	end
	if (
		( Input_Select_expected_prev[2] !== 1'bx ) && ( Input_Select_prev[2] !== Input_Select_expected_prev[2] )
		&& ((Input_Select_expected_prev[2] !== last_Input_Select_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Select[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Select_expected_prev);
		$display ("     Real value = %b", Input_Select_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_Select_exp[2] = Input_Select_expected_prev[2];
	end
	if (
		( Load_A_expected_prev !== 1'bx ) && ( Load_A_prev !== Load_A_expected_prev )
		&& ((Load_A_expected_prev !== last_Load_A_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Load_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Load_A_expected_prev);
		$display ("     Real value = %b", Load_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Load_A_exp = Load_A_expected_prev;
	end
	if (
		( Load_B_expected_prev !== 1'bx ) && ( Load_B_prev !== Load_B_expected_prev )
		&& ((Load_B_expected_prev !== last_Load_B_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Load_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Load_B_expected_prev);
		$display ("     Real value = %b", Load_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Load_B_exp = Load_B_expected_prev;
	end
	if (
		( out_state_expected_prev[0] !== 1'bx ) && ( out_state_prev[0] !== out_state_expected_prev[0] )
		&& ((out_state_expected_prev[0] !== last_out_state_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_state_expected_prev);
		$display ("     Real value = %b", out_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_state_exp[0] = out_state_expected_prev[0];
	end
	if (
		( out_state_expected_prev[1] !== 1'bx ) && ( out_state_prev[1] !== out_state_expected_prev[1] )
		&& ((out_state_expected_prev[1] !== last_out_state_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_state_expected_prev);
		$display ("     Real value = %b", out_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_state_exp[1] = out_state_expected_prev[1];
	end
	if (
		( out_state_expected_prev[2] !== 1'bx ) && ( out_state_prev[2] !== out_state_expected_prev[2] )
		&& ((out_state_expected_prev[2] !== last_out_state_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_state_expected_prev);
		$display ("     Real value = %b", out_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_state_exp[2] = out_state_expected_prev[2];
	end
	if (
		( out_state_expected_prev[3] !== 1'bx ) && ( out_state_prev[3] !== out_state_expected_prev[3] )
		&& ((out_state_expected_prev[3] !== last_out_state_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_state_expected_prev);
		$display ("     Real value = %b", out_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_state_exp[3] = out_state_expected_prev[3];
	end
	if (
		( Reset_expected_prev !== 1'bx ) && ( Reset_prev !== Reset_expected_prev )
		&& ((Reset_expected_prev !== last_Reset_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reset_expected_prev);
		$display ("     Real value = %b", Reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reset_exp = Reset_expected_prev;
	end
	if (
		( Y_Select_expected_prev !== 1'bx ) && ( Y_Select_prev !== Y_Select_expected_prev )
		&& ((Y_Select_expected_prev !== last_Y_Select_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y_Select :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_Select_expected_prev);
		$display ("     Real value = %b", Y_Select_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Y_Select_exp = Y_Select_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [3:0] MOP;
reg RUN;
// wires                                               
wire [2:0] ALUop;
wire Cin;
wire [2:0] Input_Select;
wire Load_A;
wire Load_B;
wire [3:0] out_state;
wire Reset;
wire Y_Select;

wire sampler;                             

// assign statements (if any)                          
FSM i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.Cin(Cin),
	.Clock(Clock),
	.Input_Select(Input_Select),
	.Load_A(Load_A),
	.Load_B(Load_B),
	.MOP(MOP),
	.out_state(out_state),
	.Reset(Reset),
	.RUN(RUN),
	.Y_Select(Y_Select)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #20000 1'b1;
	#20000;
end 

// RUN
initial
begin
	RUN = 1'b1;
	RUN = #440000 1'b0;
	RUN = #550000 1'b1;
end 
// MOP[ 3 ]
initial
begin
	MOP[3] = 1'b0;
end 
// MOP[ 2 ]
initial
begin
	MOP[2] = 1'b1;
end 
// MOP[ 1 ]
initial
begin
	MOP[1] = 1'b1;
end 
// MOP[ 0 ]
initial
begin
	MOP[0] = 1'b1;
end 

FSM_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.MOP(MOP),
	.RUN(RUN),
	.sampler_tx(sampler)
);

FSM_vlg_check_tst tb_out(
	.ALUop(ALUop),
	.Cin(Cin),
	.Input_Select(Input_Select),
	.Load_A(Load_A),
	.Load_B(Load_B),
	.out_state(out_state),
	.Reset(Reset),
	.Y_Select(Y_Select),
	.sampler_rx(sampler)
);
endmodule

