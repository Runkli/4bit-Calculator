// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2019 22:36:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux8to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux8to1_vlg_sample_tst(
	s,
	w0,
	w1,
	w2,
	w3,
	w4,
	w5,
	w6,
	w7,
	sampler_tx
);
input [2:0] s;
input [3:0] w0;
input [3:0] w1;
input [3:0] w2;
input [3:0] w3;
input [3:0] w4;
input [3:0] w5;
input [3:0] w6;
input [3:0] w7;
output sampler_tx;

reg sample;
time current_time;
always @(s or w0 or w1 or w2 or w3 or w4 or w5 or w6 or w7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux8to1_vlg_check_tst (
	f,
	sampler_rx
);
input [3:0] f;
input sampler_rx;

reg [3:0] f_expected;

reg [3:0] f_prev;

reg [3:0] f_expected_prev;

reg [3:0] last_f_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	f_prev = f;
end

// update expected /o prevs

always @(trigger)
begin
	f_expected_prev = f_expected;
end


// expected f[ 3 ]
initial
begin
	f_expected[3] = 1'bX;
end 
// expected f[ 2 ]
initial
begin
	f_expected[2] = 1'bX;
end 
// expected f[ 1 ]
initial
begin
	f_expected[1] = 1'bX;
end 
// expected f[ 0 ]
initial
begin
	f_expected[0] = 1'bX;
end 
// generate trigger
always @(f_expected or f)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f = %b | ",f_expected_prev);
	$display("| real f = %b | ",f_prev);
`endif
	if (
		( f_expected_prev[0] !== 1'bx ) && ( f_prev[0] !== f_expected_prev[0] )
		&& ((f_expected_prev[0] !== last_f_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[0] = f_expected_prev[0];
	end
	if (
		( f_expected_prev[1] !== 1'bx ) && ( f_prev[1] !== f_expected_prev[1] )
		&& ((f_expected_prev[1] !== last_f_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[1] = f_expected_prev[1];
	end
	if (
		( f_expected_prev[2] !== 1'bx ) && ( f_prev[2] !== f_expected_prev[2] )
		&& ((f_expected_prev[2] !== last_f_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[2] = f_expected_prev[2];
	end
	if (
		( f_expected_prev[3] !== 1'bx ) && ( f_prev[3] !== f_expected_prev[3] )
		&& ((f_expected_prev[3] !== last_f_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[3] = f_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux8to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] s;
reg [3:0] w0;
reg [3:0] w1;
reg [3:0] w2;
reg [3:0] w3;
reg [3:0] w4;
reg [3:0] w5;
reg [3:0] w6;
reg [3:0] w7;
// wires                                               
wire [3:0] f;

wire sampler;                             

// assign statements (if any)                          
mux8to1 i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.s(s),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.w4(w4),
	.w5(w5),
	.w6(w6),
	.w7(w7)
);
// s[ 2 ]
initial
begin
	repeat(2)
	begin
		s[2] = 1'b0;
		s[2] = #200000 1'b1;
		# 200000;
	end
	s[2] = 1'b0;
end 
// s[ 1 ]
always
begin
	s[1] = 1'b0;
	s[1] = #100000 1'b1;
	#100000;
end 
// s[ 0 ]
always
begin
	s[0] = 1'b0;
	s[0] = #50000 1'b1;
	#50000;
end 
// w0[ 3 ]
initial
begin
	w0[3] = 1'b0;
	w0[3] = #200000 1'b1;
	w0[3] = #50000 1'b0;
	w0[3] = #100000 1'b1;
	w0[3] = #100000 1'b0;
	w0[3] = #100000 1'b1;
	w0[3] = #50000 1'b0;
	w0[3] = #150000 1'b1;
	w0[3] = #200000 1'b0;
end 
// w0[ 2 ]
initial
begin
	w0[2] = 1'b1;
	w0[2] = #300000 1'b0;
	w0[2] = #400000 1'b1;
	w0[2] = #50000 1'b0;
	w0[2] = #150000 1'b1;
end 
// w0[ 1 ]
initial
begin
	w0[1] = 1'b0;
	w0[1] = #100000 1'b1;
	w0[1] = #150000 1'b0;
	w0[1] = #250000 1'b1;
	w0[1] = #100000 1'b0;
	w0[1] = #150000 1'b1;
	w0[1] = #50000 1'b0;
	w0[1] = #100000 1'b1;
end 
// w0[ 0 ]
initial
begin
	w0[0] = 1'b0;
	w0[0] = #250000 1'b1;
	w0[0] = #50000 1'b0;
	w0[0] = #50000 1'b1;
	w0[0] = #50000 1'b0;
	w0[0] = #50000 1'b1;
	w0[0] = #100000 1'b0;
	w0[0] = #50000 1'b1;
	w0[0] = #50000 1'b0;
	w0[0] = #50000 1'b1;
	w0[0] = #100000 1'b0;
	w0[0] = #50000 1'b1;
end 
// w1[ 3 ]
initial
begin
	w1[3] = 1'b0;
	w1[3] = #50000 1'b1;
	w1[3] = #100000 1'b0;
	w1[3] = #50000 1'b1;
	w1[3] = #100000 1'b0;
	w1[3] = #100000 1'b1;
	w1[3] = #50000 1'b0;
	w1[3] = #100000 1'b1;
	w1[3] = #50000 1'b0;
	w1[3] = #50000 1'b1;
	w1[3] = #50000 1'b0;
	w1[3] = #100000 1'b1;
end 
// w1[ 2 ]
initial
begin
	w1[2] = 1'b0;
	w1[2] = #100000 1'b1;
	w1[2] = #50000 1'b0;
	w1[2] = #100000 1'b1;
	w1[2] = #100000 1'b0;
	w1[2] = #150000 1'b1;
	w1[2] = #150000 1'b0;
	w1[2] = #150000 1'b1;
	w1[2] = #100000 1'b0;
end 
// w1[ 1 ]
initial
begin
	w1[1] = 1'b1;
	w1[1] = #100000 1'b0;
	w1[1] = #100000 1'b1;
	w1[1] = #150000 1'b0;
	w1[1] = #100000 1'b1;
	w1[1] = #50000 1'b0;
	w1[1] = #100000 1'b1;
	w1[1] = #50000 1'b0;
	w1[1] = #200000 1'b1;
	w1[1] = #100000 1'b0;
end 
// w1[ 0 ]
initial
begin
	w1[0] = 1'b1;
	w1[0] = #100000 1'b0;
	w1[0] = #50000 1'b1;
	w1[0] = #100000 1'b0;
	w1[0] = #100000 1'b1;
	w1[0] = #150000 1'b0;
	w1[0] = #150000 1'b1;
	w1[0] = #50000 1'b0;
	w1[0] = #100000 1'b1;
	w1[0] = #50000 1'b0;
	w1[0] = #100000 1'b1;
end 
// w2[ 3 ]
initial
begin
	w2[3] = 1'b0;
	w2[3] = #50000 1'b1;
	w2[3] = #50000 1'b0;
	w2[3] = #100000 1'b1;
	w2[3] = #50000 1'b0;
	w2[3] = #50000 1'b1;
	w2[3] = #50000 1'b0;
	w2[3] = #200000 1'b1;
	w2[3] = #150000 1'b0;
	w2[3] = #50000 1'b1;
	w2[3] = #100000 1'b0;
end 
// w2[ 2 ]
initial
begin
	w2[2] = 1'b0;
	w2[2] = #100000 1'b1;
	w2[2] = #50000 1'b0;
	w2[2] = #50000 1'b1;
	w2[2] = #150000 1'b0;
	w2[2] = #50000 1'b1;
	w2[2] = #100000 1'b0;
	w2[2] = #50000 1'b1;
	w2[2] = #50000 1'b0;
	w2[2] = #150000 1'b1;
	w2[2] = #50000 1'b0;
	w2[2] = #50000 1'b1;
	w2[2] = #50000 1'b0;
	w2[2] = #50000 1'b1;
end 
// w2[ 1 ]
initial
begin
	w2[1] = 1'b1;
	w2[1] = #100000 1'b0;
	w2[1] = #100000 1'b1;
	w2[1] = #350000 1'b0;
	w2[1] = #150000 1'b1;
	w2[1] = #50000 1'b0;
	w2[1] = #50000 1'b1;
	w2[1] = #50000 1'b0;
	w2[1] = #50000 1'b1;
end 
// w2[ 0 ]
initial
begin
	w2[0] = 1'b0;
	w2[0] = #250000 1'b1;
	w2[0] = #100000 1'b0;
	w2[0] = #100000 1'b1;
	w2[0] = #100000 1'b0;
	w2[0] = #100000 1'b1;
	w2[0] = #50000 1'b0;
	w2[0] = #50000 1'b1;
	w2[0] = #100000 1'b0;
	w2[0] = #50000 1'b1;
	w2[0] = #50000 1'b0;
end 
// w3[ 3 ]
initial
begin
	w3[3] = 1'b0;
	w3[3] = #100000 1'b1;
	w3[3] = #100000 1'b0;
	w3[3] = #250000 1'b1;
	w3[3] = #150000 1'b0;
	w3[3] = #50000 1'b1;
	w3[3] = #100000 1'b0;
	w3[3] = #150000 1'b1;
end 
// w3[ 2 ]
initial
begin
	w3[2] = 1'b0;
	w3[2] = #100000 1'b1;
	w3[2] = #350000 1'b0;
	w3[2] = #250000 1'b1;
	w3[2] = #50000 1'b0;
	w3[2] = #100000 1'b1;
	w3[2] = #50000 1'b0;
	w3[2] = #50000 1'b1;
end 
// w3[ 1 ]
initial
begin
	w3[1] = 1'b1;
	w3[1] = #150000 1'b0;
	w3[1] = #100000 1'b1;
	w3[1] = #450000 1'b0;
	w3[1] = #150000 1'b1;
	w3[1] = #50000 1'b0;
end 
// w3[ 0 ]
initial
begin
	w3[0] = 1'b1;
	w3[0] = #200000 1'b0;
	w3[0] = #50000 1'b1;
	w3[0] = #50000 1'b0;
	w3[0] = #50000 1'b1;
	w3[0] = #150000 1'b0;
	w3[0] = #50000 1'b1;
	w3[0] = #50000 1'b0;
	w3[0] = #50000 1'b1;
	w3[0] = #250000 1'b0;
	w3[0] = #50000 1'b1;
end 
// w4[ 3 ]
initial
begin
	w4[3] = 1'b0;
	w4[3] = #50000 1'b1;
	w4[3] = #100000 1'b0;
	w4[3] = #100000 1'b1;
	w4[3] = #150000 1'b0;
	w4[3] = #250000 1'b1;
	w4[3] = #50000 1'b0;
	w4[3] = #50000 1'b1;
	w4[3] = #50000 1'b0;
	w4[3] = #50000 1'b1;
	w4[3] = #50000 1'b0;
	w4[3] = #50000 1'b1;
end 
// w4[ 2 ]
initial
begin
	w4[2] = 1'b1;
	w4[2] = #50000 1'b0;
	w4[2] = #100000 1'b1;
	w4[2] = #50000 1'b0;
	w4[2] = #350000 1'b1;
	w4[2] = #50000 1'b0;
	w4[2] = #150000 1'b1;
	w4[2] = #150000 1'b0;
end 
// w4[ 1 ]
initial
begin
	w4[1] = 1'b1;
	w4[1] = #100000 1'b0;
	w4[1] = #50000 1'b1;
	w4[1] = #100000 1'b0;
	w4[1] = #50000 1'b1;
	w4[1] = #50000 1'b0;
	w4[1] = #100000 1'b1;
	w4[1] = #50000 1'b0;
	w4[1] = #50000 1'b1;
	w4[1] = #150000 1'b0;
	w4[1] = #50000 1'b1;
	w4[1] = #100000 1'b0;
	w4[1] = #50000 1'b1;
end 
// w4[ 0 ]
initial
begin
	w4[0] = 1'b1;
	w4[0] = #50000 1'b0;
	w4[0] = #50000 1'b1;
	w4[0] = #100000 1'b0;
	w4[0] = #50000 1'b1;
	w4[0] = #200000 1'b0;
	w4[0] = #150000 1'b1;
	w4[0] = #250000 1'b0;
end 
// w5[ 3 ]
initial
begin
	w5[3] = 1'b0;
	w5[3] = #100000 1'b1;
	w5[3] = #100000 1'b0;
	w5[3] = #100000 1'b1;
	w5[3] = #100000 1'b0;
	w5[3] = #200000 1'b1;
	w5[3] = #100000 1'b0;
	w5[3] = #150000 1'b1;
	w5[3] = #50000 1'b0;
end 
// w5[ 2 ]
initial
begin
	w5[2] = 1'b0;
	w5[2] = #50000 1'b1;
	w5[2] = #150000 1'b0;
	w5[2] = #100000 1'b1;
	w5[2] = #300000 1'b0;
	w5[2] = #100000 1'b1;
	w5[2] = #100000 1'b0;
	w5[2] = #100000 1'b1;
end 
// w5[ 1 ]
initial
begin
	w5[1] = 1'b0;
	w5[1] = #50000 1'b1;
	w5[1] = #100000 1'b0;
	w5[1] = #100000 1'b1;
	w5[1] = #150000 1'b0;
	w5[1] = #100000 1'b1;
	w5[1] = #100000 1'b0;
	w5[1] = #350000 1'b1;
end 
// w5[ 0 ]
initial
begin
	w5[0] = 1'b0;
	w5[0] = #50000 1'b1;
	w5[0] = #50000 1'b0;
	w5[0] = #100000 1'b1;
	w5[0] = #150000 1'b0;
	w5[0] = #50000 1'b1;
	w5[0] = #100000 1'b0;
	w5[0] = #100000 1'b1;
	w5[0] = #150000 1'b0;
	w5[0] = #150000 1'b1;
	w5[0] = #50000 1'b0;
end 
// w6[ 3 ]
initial
begin
	w6[3] = 1'b0;
	w6[3] = #50000 1'b1;
	w6[3] = #50000 1'b0;
	w6[3] = #100000 1'b1;
	w6[3] = #50000 1'b0;
	w6[3] = #50000 1'b1;
	w6[3] = #50000 1'b0;
	w6[3] = #250000 1'b1;
	w6[3] = #50000 1'b0;
	w6[3] = #50000 1'b1;
	w6[3] = #100000 1'b0;
	w6[3] = #150000 1'b1;
end 
// w6[ 2 ]
initial
begin
	w6[2] = 1'b1;
	w6[2] = #50000 1'b0;
	w6[2] = #50000 1'b1;
	w6[2] = #100000 1'b0;
	w6[2] = #100000 1'b1;
	w6[2] = #250000 1'b0;
	w6[2] = #200000 1'b1;
end 
// w6[ 1 ]
initial
begin
	w6[1] = 1'b1;
	w6[1] = #100000 1'b0;
	w6[1] = #100000 1'b1;
	w6[1] = #100000 1'b0;
	w6[1] = #50000 1'b1;
	w6[1] = #100000 1'b0;
	w6[1] = #400000 1'b1;
	w6[1] = #100000 1'b0;
end 
// w6[ 0 ]
initial
begin
	w6[0] = 1'b1;
	w6[0] = #50000 1'b0;
	w6[0] = #150000 1'b1;
	w6[0] = #50000 1'b0;
	w6[0] = #50000 1'b1;
	w6[0] = #50000 1'b0;
	w6[0] = #150000 1'b1;
	w6[0] = #100000 1'b0;
	w6[0] = #50000 1'b1;
	w6[0] = #50000 1'b0;
	w6[0] = #200000 1'b1;
	w6[0] = #50000 1'b0;
end 
// w7[ 3 ]
initial
begin
	w7[3] = 1'b1;
	w7[3] = #50000 1'b0;
	w7[3] = #250000 1'b1;
	w7[3] = #100000 1'b0;
	w7[3] = #150000 1'b1;
	w7[3] = #50000 1'b0;
	w7[3] = #50000 1'b1;
	w7[3] = #100000 1'b0;
	w7[3] = #50000 1'b1;
	w7[3] = #50000 1'b0;
	w7[3] = #50000 1'b1;
end 
// w7[ 2 ]
initial
begin
	w7[2] = 1'b0;
	w7[2] = #100000 1'b1;
	w7[2] = #150000 1'b0;
	w7[2] = #100000 1'b1;
	w7[2] = #50000 1'b0;
	w7[2] = #100000 1'b1;
	w7[2] = #250000 1'b0;
	w7[2] = #100000 1'b1;
	w7[2] = #50000 1'b0;
end 
// w7[ 1 ]
initial
begin
	w7[1] = 1'b1;
	w7[1] = #100000 1'b0;
	w7[1] = #300000 1'b1;
	w7[1] = #100000 1'b0;
	w7[1] = #50000 1'b1;
	w7[1] = #50000 1'b0;
	w7[1] = #100000 1'b1;
	w7[1] = #150000 1'b0;
	w7[1] = #100000 1'b1;
end 
// w7[ 0 ]
initial
begin
	w7[0] = 1'b0;
	w7[0] = #350000 1'b1;
	w7[0] = #150000 1'b0;
	w7[0] = #50000 1'b1;
	w7[0] = #200000 1'b0;
end 

mux8to1_vlg_sample_tst tb_sample (
	.s(s),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.w4(w4),
	.w5(w5),
	.w6(w6),
	.w7(w7),
	.sampler_tx(sampler)
);

mux8to1_vlg_check_tst tb_out(
	.f(f),
	.sampler_rx(sampler)
);
endmodule

